args(lm)
args(paste)
?paste
paste("a", 'b', ':')
paste("a", 'b', sep=':')
search()
?lm
?optim
optim(columnmean)
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
optim(columnmean)
ls(environment(columnmean))
x<- as.Date('1970-01-01')
unclass(x)
x<- as.Date('1970-01-01')
y<-as.Date("2018-22-10")
unclass(x)
unclass(y)
y<-as.Date("2018-22-10")
unclass(y)
y<-as.Date('2018-22-10')
unclass(y)
y<-as.Date('2018-10-22')
unclass(y)
Sys.time()
?strptime
swirl()
load(swirl)
install.packages('swirl')
library('swirl')
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5 != 7
!5==7
FALSE & FALSE
FALSE && FALSE
FALSE & TRUE
FALSE && FALSE
FALSE && TRUE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE |I c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, FALSE)
xor(5!=6, FALSE)
xor(5==6, !FALSE)
xor(!isTRUE(TRUE), 6 > -1)
!isTRUE(TRUE)
6>-1
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
any(ints<=0)
any(ints>0)
all(ints>0)
Sys.Date()
mean(c(2,3,4))
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(2,4,6))
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
5 %% 2
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate('sum', c(1,2,3))
evaluate(sum, c(1,2,3))
submit()
submit()
evaluate(stdev,vector c(1.4, 3.6, 7.9, 8.8) )
evaluate(stdev,c(1.4, 3.6, 7.9, 8.8) )
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1,1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit(0)
submit()
telegram("what is your name")
submit()
mad_ibs(chennai,biology,monument)
mad_libs(chennai,biology,monument)
mad_libs('chennai','biology','monument')
mad_libs("chennai","biology","monument")
mad_libs(c("chennai","biology","monument")
)
mad_libs(c('chennai','biology','monument'))
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(c('chennai','biology','monument'))
mad_libs(place='A',adjective='B',noun='C')
mad_libs(place='CHENNAI',adjective='BIOLOGY',noun='MONUMENT')
"%p%" <- function(alpha, beta){ # Remember to add arguments!
l <- paste(..., sep=" ")
l
}
'manga' %p% 'madayan'
"%p%" <- function(alpha, beta){ # Remember to add arguments!
paste(..., sep=" ")
}
'manga' %p% 'madayan'
"%p%" <- function(alpha, beta){ # Remember to add arguments!
paste(alpha, beta, sep=" ")
}
'manga' %p% 'madayan'
submit()
'I'%p% 'love' %p% 'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
sys.status()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months()
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x<-1:10
x>5
if(x>5) x
if(x>5) x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + xc
g <- xc + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
xc
library(stringr)
ls()
?readline
interactive()
readline()
menu(c('A', 'B'))
readline(menu(c("a","b")))
readline(menu(c("a","b")))
menu(c('A', 'B'))
menu(c('A', 'B'))
source('~/GitHub/datasciencecoursera/corr.R')
cr[1]
labels(cr)
names(cr)
seq_along(cr)
llist(cr)
sapply(cr)
lapply(cr)
lapply(cr,[[,3)
lapply(cr,'[[',3)
lapply(cr,'[[')
?lapply
cr$3
cr$estimate
cr$1
cr
cr$id
cr[id]
cr[[id]]
cr[[cr$id]]
cr[cr$id]
file_cor
file_cor_vect
source('~/GitHub/datasciencecoursera/corr.R')
print(head(cr$estimate))
file_cor
ffile_cor_vect
file_cor_vect
cr[1,1]
cr[1,2]
cr[1,3]
cr[1,4]
cr[1,5]
cr[,5]
print(head(cr[,5]))
summary(cr[,5])
summary(cr)
length(cr)
nrow(cr)
cr
crx <- as.data.frame(cr)
crx
crx$estimate
head(crx)
summary(crx)
head(crx)
head(crx$estimate)
?summary
source('~/GitHub/datasciencecoursera/corr.R')
summar(cr)
summary(cr)
source('~/GitHub/datasciencecoursera/corr.R')
summary(cr)
length(cr)
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/pollutantmean.R')
source('~/GitHub/datasciencecoursera/pollutantmean.R')
source('~/GitHub/datasciencecoursera/pollutantmean.R')
source('~/GitHub/datasciencecoursera/pollutantmean.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
source('~/GitHub/datasciencecoursera/complete.R')
setwd("C:/Users/gpalghat006/Documents/GitHub/datasciencecoursera")
source('~/GitHub/datasciencecoursera/complete.R')
setwd("C:/Users/gpalghat006/Documents/GitHub/datasciencecoursera")
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
cr
sort(cr)
length(cr)
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
length(cr)
source('~/GitHub/datasciencecoursera/corr.R')
length(cr)
source('~/GitHub/datasciencecoursera/corr.R')
cr
nrow(cr)
length(cr)
?length
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
source('~/GitHub/datasciencecoursera/corr.R')
rnorm(10)
rnorm(10,1)
rnorm(10,5)
?rnorm
runif()
runif(x)
?lapply(list, function)
?lapply
matrix(rnorm(200),20,10)
x< - matrix(rnorm(200),20,10)
x
xx< - matrix(rnorm(200),20,10)
xx <- matrix(rnorm(200),20,10)
xx
apply(xx,1,sum)
apply(xx,2,sum)
apply(xx, 1, quantile, probs = c(0.25, 0.75))
rnorm(2*2*10)
rnorm(4-)
rnorm(40)
rnorm(40)
swirl()
load(swirl)
load("swirl")
install.packages('swirl')
library('swirl')
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo
viewinfo()
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect )
sum(flags$orange)
flags_colors <-flags[,11:17]
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
xx  <- sapply(flag_colors, mean)
class(xx)
typeof(xx)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range())
lapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(flag_shapes)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <-lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flag_shapes, unique)
sapply(flag, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,unique, character(1))
ok()
vapply(flags,class, character(1))
?tapply
landmass
flags$landmass
?table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
data(iris)
?iris
iris
sapply(iris, mean)
lapply(iris, mean)
xiris <- data.frame(iris$Species = "virginica")
xiris <- data.frame(iris$Species == "virginica")
xiris
typeof(iris)
xlist <- lapply[iris, iris$Species =="virginica"]
iris[iris$Species=="virginica"]
iris[iris$Species="virginica"]
iris["virginica"]
lapply[iris, function(x){x$Species == "virginica"}]
split(iris, iris$Species)
xsplit < - split(iris, iris$Species)
xsplit <- split(iris, iris$Species)
xspli
xsplit
xsplit$virginica
mean(xsplit$virginica)
xvirginica <-xsplit$virginica
mean(xvirginica$Sepal.Length)
mean(xsplit$virginica$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
mtcars
names(mtcars)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, abs)
tapply(mtcars$hp, mtcars$cyl, average)
tapply(mtcars$hp, mtcars$cyl, avg)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)$4
bb <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(bb$4)
bb$4
names(bb)
bb["4"]
bb["4"] - bb["8"]
abs(bb["4"] - bb["8"])
abs(bb["4"] - bb["8"])
>
debug(ls)
ls
1
2
all.names
patter
pattern
exit
quit
ok90
ok()
q
q
Quit
exit
undebug(ls)
undebug(ls)
F
