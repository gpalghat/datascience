vect['bar']
vect["bar"]
vect[c('foo','bar')]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vect) <-c(4,5)
dim(my_vector) <-c(4,5)
my_vector
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c('Bill','Gina','Kelly','Sean')
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <-c('patient','age','weight','bp','rating','test')
?colnames
colnames(cnames,my_data)
colnames(my_data)
colnames(my_data) <-cnames
colnames(my_data)
my_data
columnmean <- function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
mean[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
columnmean(airquality)
airquality
View(my_matrix)
View(my_matrix2)
columnmean <- function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
columnmean(airquality)
ls
ls()
columnmean(airquality, FALSE)
?formals
formals(columnmean)
formals(airquality)
class airquality
rm(ls())
rm(list =ls())
ls()
formals(lm)
args(lm)
args(paste)
?paste
paste("a", 'b', ':')
paste("a", 'b', sep=':')
search()
?lm
?optim
optim(columnmean)
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
optim(columnmean)
ls(environment(columnmean))
x<- as.Date('1970-01-01')
unclass(x)
x<- as.Date('1970-01-01')
y<-as.Date("2018-22-10")
unclass(x)
unclass(y)
y<-as.Date("2018-22-10")
unclass(y)
y<-as.Date('2018-22-10')
unclass(y)
y<-as.Date('2018-10-22')
unclass(y)
Sys.time()
?strptime
swirl()
load(swirl)
install.packages('swirl')
library('swirl')
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5 != 7
!5==7
FALSE & FALSE
FALSE && FALSE
FALSE & TRUE
FALSE && FALSE
FALSE && TRUE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE |I c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, FALSE)
xor(5!=6, FALSE)
xor(5==6, !FALSE)
xor(!isTRUE(TRUE), 6 > -1)
!isTRUE(TRUE)
6>-1
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
any(ints<=0)
any(ints>0)
all(ints>0)
Sys.Date()
mean(c(2,3,4))
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(2,4,6))
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
5 %% 2
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate('sum', c(1,2,3))
evaluate(sum, c(1,2,3))
submit()
submit()
evaluate(stdev,vector c(1.4, 3.6, 7.9, 8.8) )
evaluate(stdev,c(1.4, 3.6, 7.9, 8.8) )
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1,1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit(0)
submit()
telegram("what is your name")
submit()
mad_ibs(chennai,biology,monument)
mad_libs(chennai,biology,monument)
mad_libs('chennai','biology','monument')
mad_libs("chennai","biology","monument")
mad_libs(c("chennai","biology","monument")
)
mad_libs(c('chennai','biology','monument'))
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(c('chennai','biology','monument'))
mad_libs(place='A',adjective='B',noun='C')
mad_libs(place='CHENNAI',adjective='BIOLOGY',noun='MONUMENT')
"%p%" <- function(alpha, beta){ # Remember to add arguments!
l <- paste(..., sep=" ")
l
}
'manga' %p% 'madayan'
"%p%" <- function(alpha, beta){ # Remember to add arguments!
paste(..., sep=" ")
}
'manga' %p% 'madayan'
"%p%" <- function(alpha, beta){ # Remember to add arguments!
paste(alpha, beta, sep=" ")
}
'manga' %p% 'madayan'
submit()
'I'%p% 'love' %p% 'R!'
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
sys.status()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months()
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x<-1:10
x>5
if(x>5) x
if(x>5) x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + xc
g <- xc + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
xc
library(stringr)
ls()
?readline
interactive()
readline()
menu(c('A', 'B'))
readline(menu(c("a","b")))
readline(menu(c("a","b")))
menu(c('A', 'B'))
menu(c('A', 'B'))
round(6.588)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
round(126.5779)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
mymatrix<-matrix(c(20,33,60,80),2,2)
mycachedmatrix<-makeCacheMatrix(mymatrix)
cacheSolve(mycachedmatrix)
cacheSolve(mycachedmatrix)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/t2.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
mymatrix<-matrix(c(20,33,60,80),2,2)
mycachedmatrix<-makeCacheMatrix(mymatrix)
cacheSolve(mycachedmatrix)
cacheSolve(mycachedmatrix)
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
outcomes_by_state <- split(outcome_file, outcome_file$State)
obst <- outcomes_by_state
obst[[1]]$Rank <- seq.int(nrows(obst[[1]]))
obst[[1]]$Rank <- seq.int(nrow(obst[[1]]))
length(obst[[1]])
length(obst[[2]])
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
options(warn=0)
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
for (i in length(obst[[1]])) {print(i)}
for (i in length(obst[[1]])) {print(i)}
for (i in 1:length(obst[[1]])) {print(i)}
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
obst
length(obst)
name(obst[1])
names(obst[1])
obst[[1]]$State
obst[[2]]$State
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
print("length is", length(obst))
print(paste0("length is", length(obst)))
print(paste0("length is", length(obst), sep=" "))
print(paste0("length is ", length(obst)))
print(paste("length is ", length(obst)))
print(paste("length is", length(obst)))
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
length(of)
of <-outcome_file[,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
length(of)
nrow(of)
of$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(of$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
of <- of[complete.cases(of),]
nrow(of)
ofs <- split(of, of$State)
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
of <-outcome_file[,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "State")]
of$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(of$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
of <- of[complete.cases(of),]
ofs <- split(of, of$State)
length(ofs)
ofs[[1]] <- ofs[[1]][order(ofs[[1]]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ofs[[1]]$Hospital.Name),]
ofs[[1]]$Rank <- seq.int(nrow(ofs[[1]]))
master_rank_list <- rbind(master_rank_list, head(ofs[[1]],1))
df<-data.frame("NA", names(ofs[1]))
master_rank_list <- rbind(master_rank_list,df)
df<-data.frame("NA", "NA", names(ofs[1]))
master_rank_list <- rbind(master_rank_list,df)
master_rank_list
df<-data.frame("NA", names(ofs[1]), 0)
master_rank_list <- rbind(master_rank_list,df)
df<-data.frame("NA", names(ofs[1]), 0)
df
master_rank_list <- rbind(master_rank_list,df)
df<-data.frame("NA", ,names(ofs[1]), )
df<-data.frame("NA","" ,names(ofs[1]), 0)
master_rank_list <- rbind(master_rank_list,df)
df<-data.frame( Hospital.Name ="NA","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack" = 9999 ,"State" = names(ofs[1]), Rank = 9999)
master_rank_list <- rbind(master_rank_list,df)
master_rank_list
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
df<-ofs[[2]][ofs[[2]]$Rank==num]
df<-ofs[[1]][ofs[[1]]$Rank==5]
df<-ofs[[1]][ofs[[1]]$Rank == 5,]
df
master_rank_list <- rbind(master_rank_list,df)
master_rank_list
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
length(of)
length(ofs)
length(ofs[[1]])
ofs[[1]]
ofs[[2]]
ofs[[3]]
nrow(ofs)
names(ofs)
length(ofs)
length(ofs[1])
nrows(ofs[1])
nrow(ofs[1])
names(ofs[1])
names(ofs[[1]])
nrow(ofs[[1]])
nrow(ofs[[2]])
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
ofs[[5]]
ofs[[50]]
ofs[[54]]
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
options(warn=0)
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
outcomes_subset <- outcome_file[outcome_file$State==state,]
outcomes_subset <- outcome_file[outcome_file$State=="state"WA,]
outcomes_subset <- outcome_file[outcome_file$State=="WA",]
outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcomes_subset_sorted <- outcomes_subset[,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
outcomes_subset_sorted <- outcomes_subset_sorted[order(outcomes_subset_sorted$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcomes_subset_sorted$Hospital.Name),]
outcomes_subset_sorted <- outcomes_subset_sorted[complete.cases(outcomes_subset_sorted),]
outcomes_subset_sorted$Rank <- seq.int(nrow(outcomes_subset_sorted))
outcomes_subset_sorted
outcomes_subset_sorted[outcomes_subset_sorted$State=="WA" & outcomes_subset_sorted$Rank == 7, 2])
outcomes_subset_sorted[outcomes_subset_sorted$State=="WA" & outcomes_subset_sorted$Rank == 7, 2])
outcomes_subset_sorted[outcomes_subset_sorted$State=="WA" & outcomes_subset_sorted$Rank == 7, 2]
outcomes_subset_sorted[outcomes_subset_sorted$State=="WA"]
print(outcomes_subset_sorted[outcomes_subset_sorted$State=="WA"])
print(outcomes_subset_sorted[outcomes_subset_sorted$State=="WA",])
print(outcomes_subset_sorted[outcomes_subset_sorted$State=="WA",2])
print(outcomes_subset_sorted[outcomes_subset_sorted$State=="WA",])
print(outcomes_subset_sorted[,outcomes_subset_sorted$State=="WA"])
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- as.numeric(outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outcomes_subset_sorted <- outcomes_subset[,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")]
outcomes_subset_sorted <- outcomes_subset[order(outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, outcomes_subset$Hospital.Name),]
outcomes_subset_sorted <- outcomes_subset_sorted[complete.cases(outcomes_subset_sorted),]
outcomes_subset_sorted$Rank <- seq.int(nrow(outcomes_subset_sorted))
names(outcomes_subset_sorted)
outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- as.numeric(outcomes_subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
outcomes_subset_sorted <- outcomes_subset[,c("Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
outcomes_subset_sorted <- outcomes_subset_sorted[order(outcomes_subset_sorted$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcomes_subset_sorted$Hospital.Name),]
outcomes_subset_sorted <- outcomes_subset_sorted[complete.cases(outcomes_subset_sorted),]
outcomes_subset_sorted$Rank <- seq.int(nrow(outcomes_subset_sorted))
names(outcomes_subset_sorted)
source('~/GitHub/datasciencecoursera/Prog Assignment 3/ProgAssignment3.R')
